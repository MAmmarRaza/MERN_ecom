<%- include('./components/header') %>

    <!-- Sign In Start -->
    <div class="container-fluid">
        <div class="row h-100 align-items-center justify-content-center" style="min-height: 100vh;">
            <div class="col-12 col-sm-8 col-md-6 col-lg-5 col-xl-4">
                <div class="bg-light rounded p-4 p-sm-5 my-4 mx-3">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <a href="index.html" class="">
                            <h3 class="text-danger"><i class="fa fa-hashtag me-2"></i>Ecommerce</h3>
                        </a>
                        <h3 class="text-danger">Sign In</h3>
                    </div>
                    <form method="post" id="loginForm">
                        <div class="form-floating mb-3">
                            <input type="email" class="form-control" id="floatingInput" placeholder="name@example.com"
                                name="email">
                            <label for="floatingInput">Email address</label>
                        </div>
                        <div class="form-floating mb-4">
                            <input type="password" class="form-control" id="floatingPassword" placeholder="Password"
                                name="password">
                            <label for="floatingPassword">Password</label>
                        </div>
                        
                        <button type="submit" class="btn btn-danger py-3 w-100 mb-4">Sign In</button>

                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const loginForm = document.getElementById('loginForm');

            loginForm.addEventListener('submit', async (event) => {
                event.preventDefault();

                const formData = new FormData(loginForm);
                const data = {};
                formData.forEach((value, key) => {
                    data[key] = value;
                });

                try {
                    const response = await fetch('/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (response.ok) {
                        console.log('Login success:', result);
                        // Store the token in the session
                        // await sessionStorage.setItem('authToken', result);
                        // Store the token in the localStorage
                        // localStorage.setItem('authToken', result);

                        // Redirect the user to a dashboard page or any other protected route
                        window.location.href = '/index';
                        // Handle successful login, e.g., redirect the user to a dashboard page
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Invalid Credentials!!'
                        });
                        console.log('Login failed:', result);
                        // Handle login failure, e.g., display an error message to the user
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Invalid Credentials!!'
                    });
                    console.log('Error occurred:', error);
                    // Handle other errors, e.g., display an error message to the user
                }
            });
        });

        
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.12/dist/sweetalert2.all.min.js"></script>